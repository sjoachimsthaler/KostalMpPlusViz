// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using PvViz.Pages;
//
//    var pvJson = PvJson.FromJson(jsonString);

namespace PvViz.Pages
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class PvJson
    {
        [JsonProperty("DayCurves")]
        public DayCurves DayCurves { get; set; }

        [JsonProperty("MonthCurves")]
        public Curves MonthCurves { get; set; }

        [JsonProperty("YearCurves")]
        public Curves YearCurves { get; set; }

        [JsonProperty("TotalCurves")]
        public TotalCurves TotalCurves { get; set; }
    }

    public partial class DayCurves
    {
        [JsonProperty("ShowVirtualDatasets")]
        public bool ShowVirtualDatasets { get; set; }

        [JsonProperty("Format")]
        public string Format { get; set; }

        [JsonProperty("Unit")]
        public string Unit { get; set; }

        [JsonProperty("IncrementUnit")]
        public string IncrementUnit { get; set; }

        [JsonProperty("IncrementStep")]
        public long IncrementStep { get; set; }

        [JsonProperty("Datasets")]
        public DayCurvesDataset[] Datasets { get; set; }
    }

    public partial class DayCurvesDataset
    {
        [JsonProperty("Type")]
        public string Type { get; set; }

        [JsonProperty("Default")]
        public long Default { get; set; }

        [JsonProperty("Data")]
        public PurpleDatum[] Data { get; set; }
    }

    public partial class PurpleDatum
    {
        [JsonProperty("Timestamp")]
        public DateTimeOffset Timestamp { get; set; }

        [JsonProperty("Offset")]
        public long Offset { get; set; }

        [JsonProperty("Total")]
        public long Total { get; set; }

        [JsonProperty("Data")]
        public long[] Data { get; set; }
    }

    public partial class Curves
    {
        [JsonProperty("ShowVirtualDatasets")]
        public bool ShowVirtualDatasets { get; set; }

        [JsonProperty("Format")]
        public string Format { get; set; }

        [JsonProperty("Unit")]
        public string Unit { get; set; }

        [JsonProperty("IncrementUnit")]
        public string IncrementUnit { get; set; }

        [JsonProperty("IncrementStep")]
        public long IncrementStep { get; set; }

        [JsonProperty("Datasets")]
        public MonthCurvesDataset[] Datasets { get; set; }
    }

    public partial class MonthCurvesDataset
    {
        [JsonProperty("Type")]
        public string Type { get; set; }

        [JsonProperty("Data")]
        public FluffyDatum[] Data { get; set; }
    }

    public partial class FluffyDatum
    {
        [JsonProperty("Timestamp")]
        [JsonConverter(typeof(CustomDateConverter))]
        public DateTime Timestamp { get; set; }

        [JsonProperty("Data")]
        public long[] Data { get; set; }
    }

    public partial class TotalCurves
    {
        [JsonProperty("ShowVirtualDatasets")]
        public bool ShowVirtualDatasets { get; set; }

        [JsonProperty("Format")]
        public string Format { get; set; }

        [JsonProperty("Unit")]
        public string Unit { get; set; }

        [JsonProperty("IncrementUnit")]
        public string IncrementUnit { get; set; }

        [JsonProperty("IncrementStep")]
        public long IncrementStep { get; set; }

        [JsonProperty("Datasets")]
        public TotalCurvesDataset[] Datasets { get; set; }
    }

    public partial class TotalCurvesDataset
    {
        [JsonProperty("Type")]
        public string Type { get; set; }

        [JsonProperty("Data")]
        public TentacledDatum[] Data { get; set; }
    }

    public partial class TentacledDatum
    {
        [JsonProperty("Timestamp")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Timestamp { get; set; }

        [JsonProperty("Data")]
        public long Data { get; set; }
    }

    public partial class PvJson
    {
        public static PvJson FromJson(string json) => JsonConvert.DeserializeObject<PvJson>(json, PvViz.Pages.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this PvJson self) => JsonConvert.SerializeObject(self, PvViz.Pages.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }

    class CustomDateConverter : IsoDateTimeConverter
    {
        public CustomDateConverter()
        {
            base.DateTimeFormat = "yyyy-MM";
        }
    }
}
